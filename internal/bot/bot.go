package bot

import (
	"DailyDoseBot/internal/config"
	"DailyDoseBot/internal/handlers"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)

func BotInit(cfg *config.Config, log *zap.Logger) {

	handlers.InitHandlers()
	pref := tele.Settings{
		Token:  cfg.TGtoken,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := tele.NewBot(pref)
	if err != nil {
		log.Error("Failed to create bot", zap.Error(err))
		return
	}

	// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ debug-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è)
	b.Handle("/debugstats", func(c tele.Context) error {
		userID := c.Sender().ID
		handlers.SendDebugStats(b, userID)
		return nil
	})

	b.Handle("/hello", func(c tele.Context) error {
		return c.Send("Hello!")
	})

	b.Handle("/start", handlers.StartHandler(b, log))

	b.Handle("/add", handlers.AddHandler(b, log))
	b.Handle("‚ûï –î–æ–±–∞–≤–∏—Ç—å", handlers.AddHandler(b, log))

	b.Handle("üìÉ –°–ø–∏—Å–æ–∫", handlers.ListHandler(b, log))
	b.Handle("/list", handlers.ListHandler(b, log))

	b.Handle("‚ùì –ü–æ–º–æ—â—å", handlers.HelpHandler(b, log))
	b.Handle("/help", handlers.HelpHandler(b, log))

	btnTime := &tele.Btn{Unique: "intake_time"}
	// Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—ë–º–∞ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
	b.Handle(btnTime, handlers.HandleTimeCallback(b, log))

	btnFood := &tele.Btn{Unique: "food"}
	b.Handle(btnFood, handlers.HandleFoodCallback(b, log))
	btnDate := &tele.Btn{Unique: "date"}
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞:
	b.Handle(btnDate, handlers.HandleDateCallback(b, log))
	btnSelDay := &tele.Btn{Unique: "select_day"}
	b.Handle(btnSelDay, handlers.HandleSelectDayCallback(b, log))
	btnSelDayDone := &tele.Btn{Unique: "select_day_done"}
	b.Handle(btnSelDayDone, handlers.HandleSelectDayCallback(b, log))

	b.Handle("/log", handlers.LogHandler(b, log))
	b.Handle("üìä –õ–æ–≥", handlers.LogHandler(b, log))
	b.Handle("/status", handlers.StatusHandler(b))
	b.Handle("üìä –°—Ç–∞—Ç—É—Å", handlers.StatusHandler(b))
	// –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—ë–º–∞ –∏–∑ /log
	b.Handle(&tele.Btn{Unique: "intake_accept_log"}, handlers.HandleIntakeAcceptLogCallback(b, log))

	b.Handle(tele.OnText, handlers.AddTextHandler(b, log))
	handlers.RegisterListCallbacks(b, log)
	b.Handle(&tele.Btn{Unique: "intake_accept"}, handlers.HandleIntakeAcceptCallback(b, log))
	handlers.StartNotifier(b, log)

	log.Info("Bot started")

	b.Start()
}
