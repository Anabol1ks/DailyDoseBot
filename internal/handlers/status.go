package handlers

import (
	"DailyDoseBot/internal/db"
	"DailyDoseBot/internal/models"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	tele "gopkg.in/telebot.v4"
)

// /status ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏—ë–º–∞–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
func StatusHandler(b *tele.Bot) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}
		var supplements []models.Supplement
		if err := db.DB.Where("user_id = ?", user.ID).Find(&supplements).Error; err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–±–∞–≤–æ–∫.")
		}
		if len(supplements) == 0 {
			return c.Send("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–æ–∫.")
		}

		today := time.Now().Truncate(24 * time.Hour)
		totalIntakes := 0
		completedIntakes := 0
		var lines []string

		for _, s := range supplements {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è
			addToday := true
			if len(s.DaysOfWeek) > 2 {
				var daysOfWeek []int
				_ = json.Unmarshal([]byte(s.DaysOfWeek), &daysOfWeek)
				todayWeekday := int(today.Weekday())
				if todayWeekday == 0 {
					todayWeekday = 6 // Go: Sunday=0, –∞ —É –Ω–∞—Å –í—Å=6
				} else {
					todayWeekday-- // Go: Monday=1, –∞ —É –Ω–∞—Å –ü–Ω=0
				}
				found := false
				for _, d := range daysOfWeek {
					if d == todayWeekday {
						found = true
						break
					}
				}
				if !found {
					addToday = false
				}
			}
			if !addToday {
				continue
			}
			var times []string
			if s.ReminderEnabled && len(s.ReminderTimes) > 2 {
				_ = json.Unmarshal([]byte(s.ReminderTimes), &times)
			}
			if len(times) == 0 {
				totalIntakes++
				var logEntry models.IntakeLog
				err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ?", user.ID, s.ID, today).First(&logEntry).Error
				if err == nil && logEntry.Taken {
					completedIntakes++
					lines = append(lines, fmt.Sprintf("‚úÖ %s ‚Äî –ø—Ä–∏–Ω—è—Ç–æ", s.Name))
				} else {
					lines = append(lines, fmt.Sprintf("‚ùå %s ‚Äî –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ", s.Name))
				}
				continue
			}
			// –ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—ë–Ω
			for _, t := range times {
				totalIntakes++
				var logEntry models.IntakeLog
				err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ? AND intake_time = ?", user.ID, s.ID, today, t).First(&logEntry).Error
				if err == nil && logEntry.Taken {
					completedIntakes++
					lines = append(lines, fmt.Sprintf("‚úÖ %s (%s)", s.Name, t))
				} else {
					lines = append(lines, fmt.Sprintf("‚ùå %s (%s)", s.Name, t))
				}
			}
		}
		percent := 0
		if totalIntakes > 0 {
			percent = int(float64(completedIntakes) / float64(totalIntakes) * 100)
		}
		msg := fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n–í—Å–µ–≥–æ –ø—Ä–∏—ë–º–æ–≤: %d\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: %d\n\n%s\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: %d%%", totalIntakes, completedIntakes, strings.Join(lines, "\n"), percent)
		return c.Send(msg)
	}
}
