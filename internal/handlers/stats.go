package handlers

import (
	"DailyDoseBot/internal/db"
	"DailyDoseBot/internal/models"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func SendWeeklyStats(bot *tele.Bot, log *zap.Logger) {
	var users []models.User
	if err := db.DB.Find(&users).Error; err != nil {
		log.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", zap.Error(err))
		return
	}

	for _, user := range users {
		msg := buildStatsMessageForUser(user)
		if msg == "" {
			continue
		}
		_, err := bot.Send(&tele.User{ID: user.TelegramID}, msg, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
		if err != nil {
			log.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", zap.Int64("telegram_id", user.TelegramID), zap.Error(err))
		}
	}
}

// –°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func buildStatsMessageForUser(user models.User) string {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–ª–Ω—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
	today := time.Now().Truncate(24 * time.Hour)
	weekday := int(today.Weekday())
	if weekday == 0 {
		weekday = 6 // Go: Sunday=0, –∞ —É –Ω–∞—Å –í—Å=6
	} else {
		weekday-- // Go: Monday=1, –∞ —É –Ω–∞—Å –ü–Ω=0
	}
	// –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
	start := today.AddDate(0, 0, -weekday-7)
	end := start.AddDate(0, 0, 6)
	days := 7
	completedDays := 0
	var progressBar string
	for i := 0; i < days; i++ {
		day := start.AddDate(0, 0, i)
		dayWeekday := int(day.Weekday())
		if dayWeekday == 0 {
			dayWeekday = 6
		} else {
			dayWeekday--
		}
		var supplements []models.Supplement
		if err := db.DB.Where("user_id = ?", user.ID).Find(&supplements).Error; err != nil {
			continue
		}
		totalIntakes := 0
		completedIntakes := 0
		for _, s := range supplements {
			if s.StartDate.After(day) {
				continue
			}
			if s.EndDate != nil && s.EndDate.Before(day) {
				continue
			}
			if len(s.DaysOfWeek) > 2 {
				var daysOfWeek []int
				_ = json.Unmarshal([]byte(s.DaysOfWeek), &daysOfWeek)
				found := false
				for _, d := range daysOfWeek {
					if d == dayWeekday {
						found = true
						break
					}
				}
				if !found {
					continue
				}
			}
			var times []string
			if s.ReminderEnabled && len(s.ReminderTimes) > 2 {
				_ = json.Unmarshal([]byte(s.ReminderTimes), &times)
			}
			if len(times) == 0 {
				totalIntakes++
				var logEntry models.IntakeLog
				err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ?", user.ID, s.ID, day).First(&logEntry).Error
				if err == nil && logEntry.Taken {
					completedIntakes++
				}
			} else {
				for _, t := range times {
					totalIntakes++
					var logEntry models.IntakeLog
					err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ? AND intake_time = ?", user.ID, s.ID, day, t).First(&logEntry).Error
					if err == nil && logEntry.Taken {
						completedIntakes++
					}
				}
			}
		}
		if totalIntakes > 0 && completedIntakes == totalIntakes {
			progressBar += "üü©"
			completedDays++
		} else if completedIntakes > 0 {
			progressBar += "üü®"
		} else {
			progressBar += "üü•"
		}
	}
	if progressBar == "" {
		return ""
	}
	percent := 0
	if days > 0 {
		percent = int(float64(completedDays) / float64(days) * 100)
	}
	msg := fmt.Sprintf("üìà *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é (—Å %s –ø–æ %s):*\n\n%s\n\n‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %d/%d –¥–Ω–µ–π (%d%%)\n\nüü© ‚Äì –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\nüü® ‚Äì —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\nüü• ‚Äì –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∑–¥–æ—Ä–æ–≤—å–µ üöÄ",
		start.Format("02.01"), end.Format("02.01"), progressBar, completedDays, days, percent)
	return msg
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func SendDebugStats(bot *tele.Bot, userID int64) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–ª–Ω—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
	today := time.Now().Truncate(24 * time.Hour)
	weekday := int(today.Weekday())
	if weekday == 0 {
		weekday = 6
	} else {
		weekday--
	}
	start := today.AddDate(0, 0, -weekday-7)
	days := 7
	var user models.User
	if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
		bot.Send(&tele.User{ID: userID}, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	var sb strings.Builder
	sb.WriteString("üõ†Ô∏è DEBUG: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é\n\n")
	weekdaysRu := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	for i := 0; i < days; i++ {
		day := start.AddDate(0, 0, i)
		dayWeekday := int(day.Weekday())
		if dayWeekday == 0 {
			dayWeekday = 6
		} else {
			dayWeekday--
		}
		dateStr := day.Format("2006-01-02")
		var supplements []models.Supplement
		if err := db.DB.Where("user_id = ?", user.ID).Find(&supplements).Error; err != nil {
			sb.WriteString(dateStr + ": –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–±–∞–≤–æ–∫\n")
			continue
		}
		totalIntakes := 0
		completedIntakes := 0
		for _, s := range supplements {
			if s.StartDate.After(day) {
				continue
			}
			if s.EndDate != nil && s.EndDate.Before(day) {
				continue
			}
			if len(s.DaysOfWeek) > 2 {
				var daysOfWeek []int
				_ = json.Unmarshal([]byte(s.DaysOfWeek), &daysOfWeek)
				found := false
				for _, d := range daysOfWeek {
					if d == dayWeekday {
						found = true
						break
					}
				}
				if !found {
					continue
				}
			}
			var times []string
			if s.ReminderEnabled && len(s.ReminderTimes) > 2 {
				_ = json.Unmarshal([]byte(s.ReminderTimes), &times)
			}
			if len(times) == 0 {
				totalIntakes++
				var logEntry models.IntakeLog
				err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ?", user.ID, s.ID, day).First(&logEntry).Error
				if err == nil && logEntry.Taken {
					completedIntakes++
					sb.WriteString(fmt.Sprintf("‚úÖ %s ‚Äî –ø—Ä–∏–Ω—è—Ç–æ (%s)\n", s.Name, s.Dosage))
				} else {
					sb.WriteString(fmt.Sprintf("‚ùå %s ‚Äî –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ (%s)\n", s.Name, s.Dosage))
				}
			} else {
				for _, t := range times {
					totalIntakes++
					var logEntry models.IntakeLog
					err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ? AND intake_time = ?", user.ID, s.ID, day, t).First(&logEntry).Error
					if err == nil && logEntry.Taken {
						completedIntakes++
						sb.WriteString(fmt.Sprintf("‚úÖ %s (%s) ‚Äî –ø—Ä–∏–Ω—è—Ç–æ\n", s.Name, t))
					} else {
						sb.WriteString(fmt.Sprintf("‚ùå %s (%s) ‚Äî –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ\n", s.Name, t))
					}
				}
			}
		}
		status := "üü•"
		if totalIntakes > 0 && completedIntakes == totalIntakes {
			status = "üü©"
		} else if completedIntakes > 0 {
			status = "üü®"
		}
		sb.WriteString(fmt.Sprintf("%s %s %s: %d/%d –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n", status, dateStr, weekdaysRu[dayWeekday], completedIntakes, totalIntakes))
	}
	bot.Send(&tele.User{ID: userID}, sb.String())
}
