package handlers

import (
	"DailyDoseBot/internal/db"
	"DailyDoseBot/internal/models"
	"DailyDoseBot/internal/utils"
	"fmt"
	"sync"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)

var (
	AddTimeButtons *tele.ReplyMarkup
	BtnMorning     tele.Btn
	BtnAfternoon   tele.Btn
	BtnEvening     tele.Btn
	BtnAnytime     tele.Btn

	AddFoodButtons *tele.ReplyMarkup
	BtnFoodYes     tele.Btn
	BtnFoodNo      tele.Btn

	AddDateButtons *tele.ReplyMarkup
	BtnToday       tele.Btn
	BtnOtherDay    tele.Btn

	addStates = struct {
		sync.RWMutex
		m map[int64]*AddState
	}{m: make(map[int64]*AddState)}
)

type AddState struct {
	Step       int
	Supplement models.Supplement
}

func initAddButtons() {
	AddTimeButtons = &tele.ReplyMarkup{}
	BtnMorning = AddTimeButtons.Data("üåÖ –£—Ç—Ä–æ", "intake_time", "morning")
	BtnAfternoon = AddTimeButtons.Data("üå§ –î–µ–Ω—å", "intake_time", "afternoon")
	BtnEvening = AddTimeButtons.Data("üåô –í–µ—á–µ—Ä", "intake_time", "evening")
	BtnAnytime = AddTimeButtons.Data("üïì –õ—é–±–æ–µ –≤—Ä–µ–º—è", "intake_time", "any")

	AddTimeButtons.Inline(
		AddTimeButtons.Row(BtnMorning, BtnAfternoon),
		AddTimeButtons.Row(BtnEvening, BtnAnytime),
	)

	AddFoodButtons = &tele.ReplyMarkup{}
	BtnFoodYes = AddFoodButtons.Data("‚úÖ", "food", "food_yes")
	BtnFoodNo = AddFoodButtons.Data("‚ùå", "food", "food_no")

	AddFoodButtons.Inline(
		AddFoodButtons.Row(BtnFoodYes, BtnFoodNo),
	)

	AddDateButtons = &tele.ReplyMarkup{}
	BtnToday = AddDateButtons.Data("–°–µ–≥–æ–¥–Ω—è", "date", "today")
	BtnOtherDay = AddDateButtons.Data("–î—Ä—É–≥–æ–π –¥–µ–Ω—å", "date", "other")
	AddDateButtons.Inline(
		AddDateButtons.Row(BtnToday, BtnOtherDay),
	)
}

func AddHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	log.Info("AddHandler initialized")
	return func(c tele.Context) error {
		userID := c.Sender().ID

		addStates.Lock()
		addStates.m[userID] = &AddState{
			Step:       1,
			Supplement: models.Supplement{},
		}
		addStates.Unlock()

		return c.Send("ü©∫ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:", utils.CloseMenu(c))
	}
}

func AddTextHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/"), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		if len(c.Text()) > 0 && c.Text()[0] == '/' {
			addStates.Lock()
			delete(addStates.m, userID)
			addStates.Unlock()
			return nil
		}

		addStates.RLock()
		state, ok := addStates.m[userID]
		addStates.RUnlock()

		if !ok {
			return utils.SendMainMenu(c)
		}

		switch state.Step {
		case 1:
			state.Supplement.Name = c.Text()
			state.Step++
			return c.Send("üíä –£–∫–∞–∂–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 000 –ú–ï/–¥–µ–Ω—å'):")

		case 2:
			state.Supplement.Dosage = c.Text()
			return c.Send("üïí –ö–æ–≥–¥–∞ –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —ç—Ç—É –¥–æ–±–∞–≤–∫—É?", AddTimeButtons)
		case 3:
			return c.Send("üòã –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Å –µ–¥–æ–π?", AddFoodButtons)
		case 4:
			return c.Send("–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–±–∞–≤–∫—É?", AddDateButtons)
		case 5:
			// –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∞—Ç—É
			log.Info("Step((()))", zap.Int("step", state.Step))

			dateStr := c.Text()
			parsed, err := parseDate(dateStr)
			if err != nil {
				return c.Send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-07-06")
			}
			state.Supplement.StartDate = parsed
			state.Step++
			log.Info("Step((()))", zap.Int("step", state.Step))
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
			_ = c.Delete()
			// –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AddDateButtons)
			_ = c.Send("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: " + parsed.Format("2006-01-02"))
			// –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É:
			return AddTextHandler(b, log)(c)
		case 6:
			log.Info("Step", zap.Int("step", state.Step))

			// –î–∞–ª–µ–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
			// –î–ª—è —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—Ä–∞–∑—É:
			addStates.Lock()
			delete(addStates.m, userID)
			addStates.Unlock()

			// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			var user models.User
			if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
				return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
			}

			state.Supplement.UserID = user.ID

			// if err := db.DB.Create(&state.Supplement).Error; err != nil {
			// 	return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–±–∞–≤–∫–∏.")
			// }
			log.Info("–î–æ–±–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", zap.Any("–¥–æ–±–∞–≤–∫–∞", state.Supplement))

			return c.Send("‚úÖ –î–æ–±–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
		}

		return nil
	}
}

func HandleTimeCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		log.Info("CALLBACK", zap.String("data", c.Data()))

		userID := c.Sender().ID
		value := c.Data()

		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		log.Info("Step", zap.Int("step", state.Step))
		log.Info("Intake time", zap.String("time", value))
		valueSend := ""
		switch value {
		case "morning":
			valueSend = "–£—Ç—Ä–æ"
		case "afternoon":
			valueSend = "–î–µ–Ω—å"
		case "evening":
			valueSend = "–í–µ—á–µ—Ä"
		case "any":
			valueSend = "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
		}
		state.Supplement.IntakeTime = value
		state.Step++
		log.Info("Step", zap.Int("step", state.Step))
		addStates.Unlock()

		// –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

		err := c.Edit("üïí –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –≤—ã–±—Ä–∞–Ω–æ: "+valueSend, &tele.ReplyMarkup{})
		if err != nil {
			log.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏", zap.Error(err))
		}

		_ = c.Respond() // –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∫–ª–∏–∫

		return AddTextHandler(b, log)(c)
	}
}

func HandleFoodCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		log.Info("CALLBACK", zap.String("data", c.Data()))

		userID := c.Sender().ID

		value := c.Data()

		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		log.Info("Step", zap.Int("step", state.Step))
		valueSend := ""
		switch value {
		case "food_yes":
			state.Supplement.WithFood = true
			valueSend = "‚úÖ"
		case "food_no":
			state.Supplement.WithFood = false
			valueSend = "‚ùå"
		}

		state.Step++
		log.Info("Step", zap.Int("step", state.Step))
		addStates.Unlock()

		// –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

		err := c.Edit("üòã –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Å –µ–¥–æ–π: "+fmt.Sprintf("%v", valueSend), &tele.ReplyMarkup{})
		if err != nil {
			log.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏", zap.Error(err))
		}

		_ = c.Respond() // –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∫–ª–∏–∫

		return AddTextHandler(b, log)(c)
	}
}

func HandleDateCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		log.Info("CALLBACK", zap.String("data", c.Data()))

		userID := c.Sender().ID
		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		if c.Data() == "today" {
			state.Supplement.StartDate = nowDate()
			state.Step += 2
			addStates.Unlock()
			log.Info("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞", zap.String("date", nowDate().Format("2006-01-02")))
			_ = c.Edit("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: "+nowDate().Format("2006-01-02"), &tele.ReplyMarkup{})

			_ = c.Respond()
			return AddTextHandler(b, log)(c)
		} else if c.Data() == "other" {
			state.Step++
			addStates.Unlock()
			_ = c.Edit("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: 2025-07-06)", &tele.ReplyMarkup{})
			_ = c.Respond()
			return nil // –∂–¥—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
		}
		addStates.Unlock()
		return nil
	}
}

func parseDate(s string) (time.Time, error) {
	parsed, err := time.Parse("2006-01-02", s)
	return parsed, err
}

func nowDate() time.Time {
	return time.Now().Truncate(24 * time.Hour)
}

func InitHandlers() {
	initAddButtons()
}
