package handlers

import (
	"DailyDoseBot/internal/db"
	"DailyDoseBot/internal/models"
	"DailyDoseBot/internal/utils"
	"encoding/json"
	"fmt"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
	"gorm.io/datatypes"
)

var (
	AddTimeButtons *tele.ReplyMarkup
	BtnMorning     tele.Btn
	BtnAfternoon   tele.Btn
	BtnEvening     tele.Btn
	BtnAnytime     tele.Btn

	AddFoodButtons *tele.ReplyMarkup
	BtnFoodYes     tele.Btn
	BtnFoodNo      tele.Btn

	AddDateButtons *tele.ReplyMarkup
	BtnToday       tele.Btn
	BtnOtherDay    tele.Btn

	addStates = struct {
		sync.RWMutex
		m map[int64]*AddState
	}{m: make(map[int64]*AddState)}
)

type AddState struct {
	Step         int
	Supplement   models.Supplement
	SelectedDays map[int]bool // –∫–ª—é—á: 0-6 (–ü–Ω-–í—Å), –∑–Ω–∞—á–µ–Ω–∏–µ true/false–ü–æ
}

func initAddButtons() {
	AddTimeButtons = &tele.ReplyMarkup{}
	BtnMorning = AddTimeButtons.Data("üåÖ –£—Ç—Ä–æ", "intake_time", "morning")
	BtnAfternoon = AddTimeButtons.Data("üå§ –î–µ–Ω—å", "intake_time", "afternoon")
	BtnEvening = AddTimeButtons.Data("üåô –í–µ—á–µ—Ä", "intake_time", "evening")
	BtnAnytime = AddTimeButtons.Data("üïì –õ—é–±–æ–µ –≤—Ä–µ–º—è", "intake_time", "any")

	AddTimeButtons.Inline(
		AddTimeButtons.Row(BtnMorning, BtnAfternoon),
		AddTimeButtons.Row(BtnEvening, BtnAnytime),
	)

	AddFoodButtons = &tele.ReplyMarkup{}
	BtnFoodYes = AddFoodButtons.Data("‚úÖ", "food", "food_yes")
	BtnFoodNo = AddFoodButtons.Data("‚ùå", "food", "food_no")

	AddFoodButtons.Inline(
		AddFoodButtons.Row(BtnFoodYes, BtnFoodNo),
	)

	AddDateButtons = &tele.ReplyMarkup{}
	BtnToday = AddDateButtons.Data("–°–µ–≥–æ–¥–Ω—è", "date", "today")
	BtnOtherDay = AddDateButtons.Data("–î—Ä—É–≥–æ–π –¥–µ–Ω—å", "date", "other")
	AddDateButtons.Inline(
		AddDateButtons.Row(BtnToday, BtnOtherDay),
	)
}

// --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ ---
func createWeekdayInlineMarkup(selected map[int]bool) *tele.ReplyMarkup {
	days := []string{"‚úñÔ∏è –ü–Ω", "‚úñÔ∏è –í—Ç", "‚úñÔ∏è –°—Ä", "‚úñÔ∏è –ß—Ç", "‚úñÔ∏è –ü—Ç", "‚úñÔ∏è –°–±", "‚úñÔ∏è –í—Å"}
	markup := &tele.ReplyMarkup{}
	var row []tele.Btn
	for i, day := range days {
		label := day
		if selected[i] {
			label = strings.Replace(label, "‚úñÔ∏è", "‚úÖ", 1)
		}
		btn := markup.Data(label, "select_day", fmt.Sprintf("%d", i))
		row = append(row, btn)
	}
	doneBtn := markup.Data("–ì–æ—Ç–æ–≤–æ", "select_day_done")
	markup.Inline(
		markup.Row(row[0], row[1], row[2]),
		markup.Row(row[3], row[4], row[5]),
		markup.Row(row[6], doneBtn),
	)
	return markup
}

// --- Callback-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ ---
func HandleSelectDayCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		if state.SelectedDays == nil {
			state.SelectedDays = make(map[int]bool)
		}
		addStates.Unlock()

		switch c.Callback().Unique {
		case "select_day_done":
			var days []int
			if len(state.SelectedDays) == 0 {
				days = []int{0, 1, 2, 3, 4, 5, 6}
			} else {
				for d := range state.SelectedDays {
					days = append(days, d)
				}
				sort.Ints(days)
			}
			jsonData, err := json.Marshal(days)
			if err != nil {
				return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π."})
			}
			state.Supplement.DaysOfWeek = jsonData
			state.Step++

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
			dayNames := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
			var daysText string
			if len(days) == 7 {
				daysText = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
			} else {
				var names []string
				for _, d := range days {
					names = append(names, dayNames[d])
				}
				daysText = strings.Join(names, ", ")
			}
			// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			_ = c.Edit("–í—ã–±—Ä–∞–Ω—ã –¥–Ω–∏: "+daysText, &tele.ReplyMarkup{})

			return AddTextHandler(b, log)(c)
		case "select_day":
			data := c.Data()
			dayInt, err := strconv.Atoi(data)
			if err != nil || dayInt < 0 || dayInt > 6 {
				return c.Respond(&tele.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å."})
			}
			addStates.Lock()
			if state.SelectedDays[dayInt] {
				delete(state.SelectedDays, dayInt)
			} else {
				state.SelectedDays[dayInt] = true
			}
			addStates.Unlock()
			return c.Edit(createWeekdayInlineMarkup(state.SelectedDays))
		default:
			return c.Respond()
		}
	}
}

func AddHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	log.Info("AddHandler initialized")
	return func(c tele.Context) error {
		userID := c.Sender().ID

		addStates.Lock()
		addStates.m[userID] = &AddState{
			Step:       1,
			Supplement: models.Supplement{},
		}
		addStates.Unlock()

		return c.Send("ü©∫ –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∫–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∏—Ç–∞–º–∏–Ω D, –ú–∞–≥–Ω–∏–π, –û–º–µ–≥–∞-3.\n\n–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É–ø–∞–∫–æ–≤–∫–∏.", utils.CancelKeyboard())
	}
}

func AddTextHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
		if c.Text() == "‚ùå –û—Ç–º–µ–Ω–∞" {
			addStates.Lock()
			delete(addStates.m, userID)
			addStates.Unlock()
			return c.Send("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", utils.MainMenuKeyboard())
		}
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/"), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		if len(c.Text()) > 0 && c.Text()[0] == '/' {
			addStates.Lock()
			delete(addStates.m, userID)
			addStates.Unlock()
			return nil
		}

		addStates.RLock()
		state, ok := addStates.m[userID]
		addStates.RUnlock()

		if !ok {
			return utils.SendMainMenu(c)
		}

		switch state.Step {
		case 1:
			state.Supplement.Name = c.Text()
			state.Step++
			return c.Send("üíä –£–∫–∞–∂–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É –¥–æ–±–∞–≤–∫–∏.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10 000 –ú–ï/–¥–µ–Ω—å, 2 –∫–∞–ø—Å—É–ª—ã —É—Ç—Ä–æ–º, 400 –º–≥.\n\n–ü–∏—à–∏ —Ç–∞–∫, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —Ç—ã —Å–∞–º –ø–æ–Ω—è–ª! üòä", utils.CancelKeyboard())

		case 2:
			state.Supplement.Dosage = c.Text()
			return c.Send("üïí –ö–æ–≥–¥–∞ –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —ç—Ç—É –¥–æ–±–∞–≤–∫—É?\n\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è:", AddTimeButtons)
		case 3:
			return c.Send("üòã –ü—Ä–∏–Ω–∏–º–∞–µ—à—å –¥–æ–±–∞–≤–∫—É –≤–º–µ—Å—Ç–µ —Å –µ–¥–æ–π?\n\n–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤.\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", AddFoodButtons)
		case 4:
			return c.Send("üìÖ –ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–±–∞–≤–∫—É?\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", AddDateButtons)
		case 5:
			// –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∞—Ç—É
			log.Info("Step((()))", zap.Int("step", state.Step))

			dateStr := c.Text()
			parsed, err := parseDate(dateStr)
			if err != nil {
				return c.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-07-06")
			}
			state.Supplement.StartDate = parsed
			state.Step++
			log.Info("Step((()))", zap.Int("step", state.Step))
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
			_ = c.Delete()
			// –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AddDateButtons)
			_ = c.Send("üìÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: " + utils.FormatDateRu(parsed))
			// –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É:
			return AddTextHandler(b, log)(c)
		case 6:
			state.Step++
			msg := `‚è≥ –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–±–∞–≤–∫—É?

–ù–∞–ø–∏—à–∏:
‚Ä¢ "3" ‚Äî –µ—Å–ª–∏ –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏
‚Ä¢ "2–º" ‚Äî –µ—Å–ª–∏ –Ω–∞ 2 –º–µ—Å—è—Ü–∞
‚Ä¢ "-" ‚Äî –µ—Å–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω–æ

–ü—Ä–∏–º–µ—Ä: 4 (4 –Ω–µ–¥–µ–ª–∏), 1–º (1 –º–µ—Å—è—Ü), - (–±–µ—Å—Å—Ä–æ—á–Ω–æ)`
			return c.Send(msg, utils.CancelKeyboard())
		case 7:
			input := strings.TrimSpace(c.Text())

			if input == "-" {
				state.Supplement.EndDate = nil
				state.Step++
				_ = c.Send("‚úÖ –ü—Ä–∏—ë–º –¥–æ–±–∞–≤–∫–∏ –±—É–¥–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω—ã–º.")
				return AddTextHandler(b, log)(c)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Ü–∏—Ñ—Ä–∞ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞+–º/–ú
			weeksRegex := regexp.MustCompile(`^\d+$`)
			monthsRegex := regexp.MustCompile(`^(\d+)[–º–ú]$`)

			var endDate time.Time

			startDate := state.Supplement.StartDate
			if weeksRegex.MatchString(input) {
				weeks, err := strconv.Atoi(input)
				if err != nil {
					return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3")
				}
				endDate = startDate.AddDate(0, 0, weeks*7)
			} else if matches := monthsRegex.FindStringSubmatch(input); matches != nil {
				months, err := strconv.Atoi(matches[1])
				if err != nil {
					return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2–º")
				}
				endDate = startDate.AddDate(0, months, 0)
			} else {
				return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3), –º–µ—Å—è—Ü–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2–º) –∏–ª–∏ '-' –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞.")
			}

			state.Supplement.EndDate = &endDate
			state.Step++
			_ = c.Send("‚úÖ –ü—Ä–∏—ë–º –¥–æ–±–∞–≤–∫–∏ –¥–æ " + endDate.Format("2006-01-02"))
			return AddTextHandler(b, log)(c)
		case 8:
			if state.SelectedDays == nil {
				state.SelectedDays = make(map[int]bool)
			}
			markup := createWeekdayInlineMarkup(state.SelectedDays)
			return c.Send("üìÜ –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –±—É–¥–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–±–∞–≤–∫—É?\n\n–û—Ç–º–µ—Ç—å –Ω—É–∂–Ω—ã–µ –¥–Ω–∏ –∏ –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ'.\n–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±–µ—Ä–µ—à—å ‚Äî –±—É–¥–µ—Ç '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å'.", markup)

		case 9:
			state.Step++

			msg := `‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏—ë–º–µ?

–ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 13:30
–ò–ª–∏ –Ω–∞–ø–∏—à–∏ "–Ω–µ—Ç", –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã.`
			return c.Send(msg)

		case 10:
			input := strings.TrimSpace(c.Text())

			if strings.ToLower(input) == "–Ω–µ—Ç" {
				state.Supplement.ReminderEnabled = false
				state.Supplement.ReminderTimes = datatypes.JSON([]byte("[]"))
				state.Step++
				_ = c.Delete() // —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				_ = c.Send("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", &tele.ReplyMarkup{})
				return AddTextHandler(b, log)(c)
			}

			times := strings.Split(input, ",")
			var cleanedTimes []string
			timeRegex := regexp.MustCompile(`^(?:[01]\d|2[0-3]):[0-5]\d$`)

			for _, t := range times {
				t = strings.TrimSpace(t)
				if !timeRegex.MatchString(t) {
					return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 13:30.\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
				}
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å 30 –º–∏–Ω—É—Ç–∞–º
				parts := strings.Split(t, ":")
				minutes, err := strconv.Atoi(parts[1])
				if err != nil || (minutes != 0 && minutes != 30) {
					return c.Send("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 30 –º–∏–Ω—É—Ç–∞–º (–¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã '00' –∏–ª–∏ '30'). –ù–∞–ø—Ä–∏–º–µ—Ä: 08:00, 13:30.\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
				}
				cleanedTimes = append(cleanedTimes, t)
			}

			jsonTimes, err := json.Marshal(cleanedTimes)
			if err != nil {
				return c.Send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
			}

			state.Supplement.ReminderTimes = jsonTimes
			state.Supplement.ReminderEnabled = true
			state.Step++

			_ = c.Delete() // —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			_ = c.Send(fmt.Sprintf("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: %s", strings.Join(cleanedTimes, ", ")), &tele.ReplyMarkup{})

			return AddTextHandler(b, log)(c)
		case 11:
			// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
			dayNames := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
			var daysList []int
			_ = json.Unmarshal(state.Supplement.DaysOfWeek, &daysList)
			var daysText string
			if len(daysList) == 7 {
				daysText = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
			} else {
				var names []string
				for _, d := range daysList {
					if d >= 0 && d < len(dayNames) {
						names = append(names, dayNames[d])
					}
				}
				daysText = strings.Join(names, ", ")
			}
			reminderTimes := "‚Äî"
			if state.Supplement.ReminderEnabled {
				var times []string
				_ = json.Unmarshal(state.Supplement.ReminderTimes, &times)
				if len(times) > 0 {
					reminderTimes = strings.Join(times, ", ")
				}
			} else {
				reminderTimes = "–û—Ç–∫–ª—é—á–µ–Ω—ã"
			}
			withFood := "‚Äî"
			if state.Supplement.WithFood {
				withFood = "–î–∞"
			} else {
				withFood = "–ù–µ—Ç"
			}
			endDate := "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
			if state.Supplement.EndDate != nil {
				endDate = utils.FormatDateRu(*state.Supplement.EndDate)
			}
			intakeTime := state.Supplement.IntakeTime
			switch intakeTime {
			case "morning":
				intakeTime = "–£—Ç—Ä–æ"
			case "afternoon":
				intakeTime = "–î–µ–Ω—å"
			case "evening":
				intakeTime = "–í–µ—á–µ—Ä"
			case "any":
				intakeTime = "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
			}
			msg := "ü©∫ –í–æ—Ç —á—Ç–æ —è –∑–∞–ø–∏—Å–∞–ª:\n" +
				"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: " + state.Supplement.Name + "\n" +
				"‚Ä¢ –î–æ–∑–∏—Ä–æ–≤–∫–∞: " + state.Supplement.Dosage + "\n" +
				"‚Ä¢ –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: " + intakeTime + "\n" +
				"‚Ä¢ –° –µ–¥–æ–π: " + withFood + "\n" +
				"‚Ä¢ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: " + daysText + "\n" +
				"‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: " + utils.FormatDateRu(state.Supplement.StartDate) + "\n" +
				"‚Ä¢ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: " + endDate + "\n" +
				"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + reminderTimes
			state.Step++
			_ = c.Send(msg)
			return AddTextHandler(b, log)(c)
		case 12:
			log.Info("Step", zap.Int("step", state.Step))

			// –î–∞–ª–µ–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
			// –î–ª—è —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—Ä–∞–∑—É:
			addStates.Lock()
			delete(addStates.m, userID)
			addStates.Unlock()

			// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			var user models.User
			if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
				return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
			}

			state.Supplement.UserID = user.ID

			if err := db.DB.Create(&state.Supplement).Error; err != nil {
				return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–±–∞–≤–∫–∏.")
			}
			log.Info("–î–æ–±–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", zap.Any("–¥–æ–±–∞–≤–∫–∞", state.Supplement))

			return c.Send("‚úÖ –î–æ–±–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", utils.MainMenuKeyboard())
		}

		return nil
	}
}

func HandleTimeCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		log.Info("CALLBACK", zap.String("data", c.Data()))

		userID := c.Sender().ID
		value := c.Data()

		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		log.Info("Step", zap.Int("step", state.Step))
		log.Info("Intake time", zap.String("time", value))
		valueSend := ""
		switch value {
		case "morning":
			valueSend = "–£—Ç—Ä–æ"
		case "afternoon":
			valueSend = "–î–µ–Ω—å"
		case "evening":
			valueSend = "–í–µ—á–µ—Ä"
		case "any":
			valueSend = "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
		}
		state.Supplement.IntakeTime = value
		state.Step++
		log.Info("Step", zap.Int("step", state.Step))
		addStates.Unlock()

		// –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

		err := c.Edit("üïí –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –≤—ã–±—Ä–∞–Ω–æ: "+valueSend, &tele.ReplyMarkup{})
		if err != nil {
			log.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏", zap.Error(err))
		}

		_ = c.Respond() // –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∫–ª–∏–∫

		return AddTextHandler(b, log)(c)
	}
}

func HandleFoodCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		log.Info("CALLBACK", zap.String("data", c.Data()))

		userID := c.Sender().ID

		value := c.Data()

		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		log.Info("Step", zap.Int("step", state.Step))
		valueSend := ""
		switch value {
		case "food_yes":
			state.Supplement.WithFood = true
			valueSend = "‚úÖ"
		case "food_no":
			state.Supplement.WithFood = false
			valueSend = "‚ùå"
		}

		state.Step++
		log.Info("Step", zap.Int("step", state.Step))
		addStates.Unlock()

		// –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

		err := c.Edit("üòã –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Å –µ–¥–æ–π: "+fmt.Sprintf("%v", valueSend), &tele.ReplyMarkup{})
		if err != nil {
			log.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏", zap.Error(err))
		}

		_ = c.Respond() // –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∫–ª–∏–∫

		return AddTextHandler(b, log)(c)
	}
}

func HandleDateCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		log.Info("CALLBACK", zap.String("data", c.Data()))

		userID := c.Sender().ID
		addStates.Lock()
		state, ok := addStates.m[userID]
		if !ok {
			addStates.Unlock()
			return c.Respond(&tele.CallbackResponse{Text: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		if c.Data() == "today" {
			state.Supplement.StartDate = nowDate()
			state.Step += 2
			addStates.Unlock()
			log.Info("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞", zap.String("date", nowDate().Format("2006-01-02")))
			_ = c.Edit("–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: "+nowDate().Format("2006-01-02"), &tele.ReplyMarkup{})

			_ = c.Respond()
			return AddTextHandler(b, log)(c)
		} else if c.Data() == "other" {
			state.Step++
			addStates.Unlock()
			_ = c.Edit("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: 2025-07-06)", &tele.ReplyMarkup{})
			_ = c.Respond()
			return nil // –∂–¥—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
		}
		addStates.Unlock()
		return nil
	}
}

func parseDate(s string) (time.Time, error) {
	parsed, err := time.Parse("2006-01-02", s)
	return parsed, err
}

func nowDate() time.Time {
	return time.Now().Truncate(24 * time.Hour)
}

func InitHandlers() {
	initAddButtons()
}
