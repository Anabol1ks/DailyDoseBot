package handlers

import (
	"DailyDoseBot/internal/db"
	"DailyDoseBot/internal/models"
	"DailyDoseBot/internal/utils"
	"fmt"
	"strings"
	"sync"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)

func supplementInfoText(s models.Supplement) string {
	endDate := "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
	if s.EndDate != nil {
		endDate = utils.FormatDateRu(*s.EndDate)
	}
	withFood := "–ù–µ—Ç"
	if s.WithFood {
		withFood = "–î–∞"
	}

	intakeTime := s.IntakeTime
	switch intakeTime {
	case "morning":
		intakeTime = "–£—Ç—Ä–æ"
	case "afternoon":
		intakeTime = "–î–µ–Ω—å"
	case "evening":
		intakeTime = "–í–µ—á–µ—Ä"
	case "any":
		intakeTime = "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
	}

	// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏—ë–º–∞
	var daysOfWeek []int
	var daysText string
	if err := utils.UnmarshalJSON(s.DaysOfWeek, &daysOfWeek); err == nil && len(daysOfWeek) > 0 {
		daysRu := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
		if len(daysOfWeek) == 7 {
			daysText = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"
		} else {
			var names []string
			for _, d := range daysOfWeek {
				if d >= 0 && d < 7 {
					names = append(names, daysRu[d])
				}
			}
			daysText = "" + strings.Join(names, ", ")
		}
	} else {
		daysText = "‚Äî"
	}

	// –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
	reminder := "‚Äî"
	if s.ReminderEnabled && len(s.ReminderTimes) > 2 { // []
		var times []string
		_ = utils.UnmarshalJSON(s.ReminderTimes, &times)
		if len(times) > 0 {
			reminder = fmt.Sprintf("%s", times)
		}
	} else if !s.ReminderEnabled {
		reminder = "–û—Ç–∫–ª—é—á–µ–Ω—ã"
	}

	return fmt.Sprintf("–î–æ–±–∞–≤–∫–∞: %s\n–î–æ–∑–∏—Ä–æ–≤–∫–∞: %s\n–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: %s\n–î–Ω–∏ –ø—Ä–∏—ë–º–∞: %s\n–° –µ–¥–æ–π: %v\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: %s\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %s",
		s.Name, s.Dosage, intakeTime, daysText, withFood, utils.FormatDateRu(s.StartDate), endDate, reminder)
}
func supplementDetailHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		name := c.Data()
		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}
		var supplement models.Supplement
		if err := db.DB.Where("user_id = ? AND name = ?", user.ID, name).First(&supplement).Error; err != nil {
			return c.Send("–î–æ–±–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		}
		markup := &tele.ReplyMarkup{}
		btnDelete := markup.Data("üóë –£–¥–∞–ª–∏—Ç—å", "supplement_delete", supplement.Name)
		markup.Inline(markup.Row(btnDelete))
		return c.Edit(supplementInfoText(supplement), markup)
	}
}

func supplementDeleteHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		name := c.Data()
		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}
		var supplement models.Supplement
		if err := db.DB.Where("user_id = ? AND name = ?", user.ID, name).First(&supplement).Error; err != nil {
			return c.Send("–î–æ–±–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		}
		markup := &tele.ReplyMarkup{}
		btnYes := markup.Data("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "supplement_delete_confirm", supplement.Name)
		btnNo := markup.Data("‚ùå –ù–µ—Ç", "supplement_detail", supplement.Name)
		markup.Inline(markup.Row(btnYes, btnNo))
		return c.Edit("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–æ–±–∞–≤–∫—É?", markup)
	}
}

func supplementDeleteConfirmHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		name := c.Data()
		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}
		if err := db.DB.Where("user_id = ? AND name = ?", user.ID, name).Delete(&models.Supplement{}).Error; err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
		}
		return c.Edit("–î–æ–±–∞–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", &tele.ReplyMarkup{})
	}
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞
func RegisterListCallbacks(b *tele.Bot, log *zap.Logger) {
	b.Handle(&tele.Btn{Unique: "supplement_detail"}, supplementDetailHandler(b, log))
	b.Handle(&tele.Btn{Unique: "supplement_delete"}, supplementDeleteHandler(b, log))
	b.Handle(&tele.Btn{Unique: "supplement_delete_confirm"}, supplementDeleteConfirmHandler(b, log))
}

var (
	listStates = struct {
		sync.RWMutex
		m map[int64]*ListState
	}{m: make(map[int64]*ListState)}
)

type ListState struct {
	Step int
}

func createListInlineMarkup(supplements []models.Supplement) *tele.ReplyMarkup {
	markup := &tele.ReplyMarkup{}
	var rows []tele.Row
	for _, s := range supplements {
		btn := markup.Data(s.Name, "supplement_detail", s.Name)
		rows = append(rows, markup.Row(btn))
	}
	markup.Inline(rows...)
	return markup
}

func ListHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	log.Info("ListHandler initialized")
	return func(c tele.Context) error {
		userID := c.Sender().ID

		listStates.Lock()
		if _, ok := listStates.m[userID]; !ok {
			listStates.m[userID] = &ListState{}
		}
		listStates.Unlock()

		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			log.Error("User not found", zap.Error(err))
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}
		var supplements []models.Supplement
		if err := db.DB.Where("user_id = ?", user.ID).Find(&supplements).Error; err != nil {
			log.Error("Error fetching supplements", zap.Error(err))
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–±–∞–≤–æ–∫.")
		}
		if len(supplements) == 0 {
			return c.Send("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–æ–∫.")
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–æ–∫ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
		markup := createListInlineMarkup(supplements)
		return c.Send("–¢–≤–æ–∏ –¥–æ–±–∞–≤–∫–∏:", markup)
	}
}
