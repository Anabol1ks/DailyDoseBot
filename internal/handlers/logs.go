package handlers

import (
	"DailyDoseBot/internal/db"
	"DailyDoseBot/internal/models"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)

// –õ–æ–≥-—Ö–µ–Ω–¥–ª–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏
func LogHandler(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			return c.Send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		}
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–±–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var supplements []models.Supplement
		if err := db.DB.Where("user_id = ?", user.ID).Find(&supplements).Error; err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–±–∞–≤–æ–∫.")
		}
		if len(supplements) == 0 {
			return c.Send("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–æ–∫.")
		}

		today := time.Now().Truncate(24 * time.Hour)
		markup := &tele.ReplyMarkup{}
		var rows []tele.Row
		for _, s := range supplements {
			// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
			var times []string
			if s.ReminderEnabled && len(s.ReminderTimes) > 2 {
				_ = db.DB.Statement.Context // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
				_ = json.Unmarshal([]byte(s.ReminderTimes), &times)
			}
			if len(times) == 0 {
				// –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º—ë–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
				var logEntry models.IntakeLog
				err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ?", user.ID, s.ID, today).First(&logEntry).Error
				if err == nil && logEntry.Taken {
					row := markup.Row(markup.Text(fmt.Sprintf("‚úÖ %s ‚Äî –ø—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è", s.Name)))
					rows = append(rows, row)
				} else {
					btn := markup.Data(fmt.Sprintf("‚ùå %s ‚Äî –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ", s.Name), "intake_accept_log", s.ID.String()+"|")
					row := markup.Row(btn)
					rows = append(rows, row)
				}
				continue
			}
			// –î–ª—è –∫–∞–∂–¥–æ–π –¥–æ–±–∞–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
			allTaken := true
			for _, t := range times {
				var logEntry models.IntakeLog
				err := db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ? AND intake_time = ?", user.ID, s.ID, today, t).First(&logEntry).Error
				if err == nil && logEntry.Taken {
					row := markup.Row(markup.Text(fmt.Sprintf("‚úÖ %s (%s)", s.Name, t)))
					rows = append(rows, row)
				} else {
					allTaken = false
					btn := markup.Data(fmt.Sprintf("‚ùå %s (%s)", s.Name, t), "intake_accept_log", s.ID.String()+"|"+t)
					row := markup.Row(btn)
					rows = append(rows, row)
				}
			}
			if allTaken && len(times) > 1 {
				// –ï—Å–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–º–µ—á–µ–Ω—ã, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
				row := markup.Row(markup.Text(fmt.Sprintf("‚úÖ %s ‚Äî –≤—Å–µ –ø—Ä–∏—ë–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", s.Name)))
				rows = append(rows, row)
			}
		}
		markup.Inline(rows...)
		return c.Send("üìä –î–æ–±–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", markup)
	}
}

// Callback-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—ë–º–∞ –∏–∑ /log
func HandleIntakeAcceptLogCallback(b *tele.Bot, log *zap.Logger) func(c tele.Context) error {
	return func(c tele.Context) error {
		userID := c.Sender().ID
		data := c.Data() // s.ID|time
		parts := strings.SplitN(data, "|", 2)
		suppIDStr := parts[0]
		intakeTime := ""
		if len(parts) > 1 {
			intakeTime = parts[1]
		}
		suppUUID, err := uuid.Parse(suppIDStr)
		if err != nil {
			return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ ID"})
		}
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var user models.User
		if err := db.DB.First(&user, "telegram_id = ?", userID).Error; err != nil {
			return c.Respond(&tele.CallbackResponse{Text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		}
		// –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–∫—É
		var supplement models.Supplement
		if err := db.DB.First(&supplement, "id = ?", suppUUID).Error; err != nil {
			return c.Respond(&tele.CallbackResponse{Text: "–î–æ–±–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		}
		today := time.Now().Truncate(24 * time.Hour)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ IntakeLog
		var logEntry models.IntakeLog
		err = db.DB.Where("user_id = ? AND supplement_id = ? AND intake_date = ? AND intake_time = ?", user.ID, supplement.ID, today, intakeTime).First(&logEntry).Error
		if err == nil {
			// –£–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, –æ–±–Ω–æ–≤–∏–º
			logEntry.Taken = true
			db.DB.Save(&logEntry)
		} else {
			// –ù–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º
			logEntry = models.IntakeLog{
				UserID:       user.ID,
				SupplementID: supplement.ID,
				IntakeDate:   today,
				IntakeTime:   intakeTime,
				Taken:        true,
			}
			db.DB.Create(&logEntry)
		}
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
		_ = c.Edit("‚úÖ –ü—Ä–∏—ë–º –æ—Ç–º–µ—á–µ–Ω!", &tele.ReplyMarkup{})
		return c.Respond(&tele.CallbackResponse{Text: "–û—Ç–ª–∏—á–Ω–æ!"})
	}
}
