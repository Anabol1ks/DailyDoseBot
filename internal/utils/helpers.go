package utils

import (
	"encoding/json"
	"fmt"
	"time"

	tele "gopkg.in/telebot.v4"
)

// –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ datatypes.JSON
func UnmarshalJSON(data interface{}, v interface{}) error {
	switch t := data.(type) {
	case []byte:
		return json.Unmarshal(t, v)
	case string:
		return json.Unmarshal([]byte(t), v)
	default:
		return json.Unmarshal([]byte(fmt.Sprintf("%v", t)), v)
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞" –¥–ª—è —ç—Ç–∞–ø–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
func CancelKeyboard() *tele.ReplyMarkup {
	menu := &tele.ReplyMarkup{ResizeKeyboard: true, OneTimeKeyboard: true}
	btnCancel := menu.Text("‚ùå –û—Ç–º–µ–Ω–∞")
	menu.Reply(menu.Row(btnCancel))
	return menu
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ü–æ–º–æ—â—å"
func MainMenuKeyboard() *tele.ReplyMarkup {
	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnAdd := menu.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
	btnList := menu.Text("üìÉ –°–ø–∏—Å–æ–∫")
	btnLog := menu.Text("üìä –õ–æ–≥")
	btnStatus := menu.Text("üìä –°—Ç–∞—Ç—É—Å")
	btnHelp := menu.Text("‚ùì –ü–æ–º–æ—â—å")
	// –ë–æ–ª–µ–µ user-friendly: –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
	menu.Reply(
		menu.Row(btnAdd, btnList),
		menu.Row(btnLog, btnStatus),
		menu.Row(btnHelp),
	)
	return menu
}

func SendMainMenu(c tele.Context) error {
	msg := `üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏—ë–º–µ –¥–æ–±–∞–≤–æ–∫ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å)
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–∏—ë–º –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º
‚Ä¢ –í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–æ–±–∞–≤–∫—É
/list ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–æ–∫
/log ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—ë–º –≤—Ä—É—á–Ω—É—é
/status ‚Äî —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
`
	return c.Send(msg, &tele.SendOptions{ParseMode: tele.ModeHTML})
}

func CloseMenu(c tele.Context) *tele.ReplyMarkup {
	replyMarkup := &tele.ReplyMarkup{}
	replyMarkup.RemoveKeyboard = true
	return replyMarkup
}

func FormatDateRu(t time.Time) string {
	months := []string{"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"}
	day := t.Day()
	month := months[int(t.Month())-1]
	year := t.Year()
	return fmt.Sprintf("%d %s %d", day, month, year)
}
